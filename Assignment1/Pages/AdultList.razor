@page "/list"
@using Assignment1.Data.Adults
@using Assignment1.Models
@using System.Text.Json;
@inject NavigationManager NavigationManager
@inject IAdultData AdultData
@inject HttpClient Http

<h1>List of adults</h1>

<p>Filter by:</p>
<div class="filter-container">
    <select class="custom-select filter-property" @onchange="@((arg) => ChangeFilter(arg))">
        <option selected disabled>Select property</option>
        @foreach (var value in adultProperties)
        {
            <option>@value</option>
        }
    </select>

    @{
        switch (selectedFilter)
        {
            case "Id":
            case "Age":
            case "Height":
            case "Weight":
            case "Salary":
                <input type="number" class="form-control filter-text-input" placeholder="Enter @selectedFilter.ToLower()" @onchange="@((arg) => Filter(arg))">
                break;
            case "First Name":
            case "Last Name":
            case "Hair Color":
            case "Eye Color":
            case "Job Title":
                <input type="text" class="form-control filter-text-input" placeholder="Enter @selectedFilter.ToLower()" @onchange="@((arg) => Filter(arg))">
                break;
            case "Sex":
                <select class="custom-select filter-select-sex" @onchange="@((arg) => Filter(arg))">
                    <option disabled selected>Select sex</option>
                    <option>M</option>
                    <option>F</option>
                    <option>Other</option>
                </select>
                break;
        }
    }
</div>


@if (adultsToShow == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                @foreach (var value in adultProperties)
                {
                    <th>@value</th>
                }
                <AuthorizeView Policy="IsRegistered">
                    <th></th>
                    <th></th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in adultsToShow)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.HairColor</td>
                    <td>@item.EyeColor</td>
                    <td>@item.Age</td>
                    <td>@item.Weight</td>
                    <td>@item.Height</td>
                    <td>@item.Sex</td>
                    <td>@item.JobTitle.JobTitle</td>
                    <td>@item.JobTitle.Salary</td>
                    <AuthorizeView Policy="IsRegistered">
                        <td>
                            <button class="delete-btn" @onclick="@(() => RemoveAdult(item.Id))">
                                <i class="oi oi-trash" style="color: red;"></i>
                            </button>
                        </td>
                        <td>
                            <button class="edit-btn" @onclick="@(() => Edit(item.Id))">
                                <i class="oi oi-pencil" style="color: darkgreen;"></i>
                            </button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string[] adultProperties = new string[] { "Id", "First Name", "Last Name", "Hair Color", "Eye Color", "Age", "Weight", "Height", "Sex", "Job Title", "Salary" };

    private string selectedFilter;
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    protected override async Task OnInitializedAsync()
    {
        allAdults = await AdultData.GetAdults();
        adultsToShow = allAdults.ToList();
        StateHasChanged();
    }

    private void RemoveAdult(int adultId)
    {
        Adult toRemove = allAdults.First(a => a.Id == adultId);
        allAdults.Remove(toRemove);
        adultsToShow.Remove(toRemove);
        AdultData.RemoveAdult(toRemove);
    }

    private void Edit(int adultId)
    {
        NavigationManager.NavigateTo($"edit/{adultId}");
    }

    private void ChangeFilter(ChangeEventArgs arg)
    {
        selectedFilter = arg.Value.ToString();
        adultsToShow = allAdults;
    }

    private void Filter(ChangeEventArgs arg)
    {
        switch (selectedFilter)
        {
            case "Id":
                int? filterById = null;
                try
                {
                    filterById = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterById != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Id == filterById).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Age":
                int? filterByAge = null;
                try
                {
                    filterByAge = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByAge != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Age == filterByAge).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Height":
                int? filterByHeight = null;
                try
                {
                    filterByHeight = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByHeight != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Height == filterByHeight).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Weight":
                int? filterByWeight = null;
                try
                {
                    filterByWeight = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByWeight != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Weight == filterByWeight).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Salary":
                int? filterBySalary = null;
                try
                {
                    filterBySalary = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterBySalary != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.JobTitle.Salary == filterBySalary).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "First Name":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.FirstName.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Last Name":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.LastName.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Hair Color":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.HairColor.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Eye Color":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.EyeColor.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Job Title":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.JobTitle.JobTitle.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Sex":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Sex == arg.Value.ToString()).ToList();
                }
                else adultsToShow = allAdults;
                break;
        }
    }
    }