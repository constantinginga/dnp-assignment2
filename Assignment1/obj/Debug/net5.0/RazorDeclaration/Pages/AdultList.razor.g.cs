// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Assignment1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Assignment1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\_Imports.razor"
using Assignment1.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\Pages\AdultList.razor"
using Assignment1.Data.Adults;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\Pages\AdultList.razor"
using Assignment1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\Pages\AdultList.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/list")]
    public partial class AdultList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 103 "C:\Users\coste\Desktop\School\3rd Semester\DNP1\fromgit\dnp-assignment1\Assignment1\Pages\AdultList.razor"
       
    private string[] adultProperties = new string[] { "Id", "First Name", "Last Name", "Hair Color", "Eye Color", "Age", "Weight", "Height", "Sex", "Job Title", "Salary" };

    private string selectedFilter;
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    protected override async Task OnInitializedAsync()
    {
        allAdults = await AdultData.GetAdults();
        adultsToShow = allAdults.ToList();
        StateHasChanged();
    }

    private void RemoveAdult(int adultId)
    {
        Adult toRemove = allAdults.First(a => a.Id == adultId);
        allAdults.Remove(toRemove);
        adultsToShow.Remove(toRemove);
        AdultData.RemoveAdult(toRemove);
    }

    private void Edit(int adultId)
    {
        NavigationManager.NavigateTo($"edit/{adultId}");
    }

    private void ChangeFilter(ChangeEventArgs arg)
    {
        selectedFilter = arg.Value.ToString();
        adultsToShow = allAdults;
    }

    private void Filter(ChangeEventArgs arg)
    {
        switch (selectedFilter)
        {
            case "Id":
                int? filterById = null;
                try
                {
                    filterById = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterById != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Id == filterById).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Age":
                int? filterByAge = null;
                try
                {
                    filterByAge = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByAge != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Age == filterByAge).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Height":
                int? filterByHeight = null;
                try
                {
                    filterByHeight = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByHeight != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Height == filterByHeight).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Weight":
                int? filterByWeight = null;
                try
                {
                    filterByWeight = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterByWeight != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Weight == filterByWeight).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Salary":
                int? filterBySalary = null;
                try
                {
                    filterBySalary = int.Parse(arg.Value.ToString());
                }
                catch (Exception e) { Console.WriteLine(e); }
                if (filterBySalary != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.JobTitle.Salary == filterBySalary).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "First Name":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.FirstName.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Last Name":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.LastName.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Hair Color":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.HairColor.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Eye Color":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.EyeColor.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Job Title":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.JobTitle.JobTitle.Contains(arg.Value.ToString())).ToList();
                }
                else adultsToShow = allAdults;
                break;
            case "Sex":
                if (arg.Value.ToString() != null)
                {
                    adultsToShow = allAdults.Where(adult => adult.Sex == arg.Value.ToString()).ToList();
                }
                else adultsToShow = allAdults;
                break;
        }
    }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAdultData AdultData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
